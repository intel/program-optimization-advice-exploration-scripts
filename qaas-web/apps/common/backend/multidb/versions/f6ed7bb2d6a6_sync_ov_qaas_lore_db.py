"""sync ov qaas lore db

Revision ID: f6ed7bb2d6a6
Revises: 
Create Date: 2023-12-20 22:56:12.375848

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = 'f6ed7bb2d6a6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade(engine_name: str) -> None:
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name: str) -> None:
    globals()["downgrade_%s" % engine_name]()





def upgrade_engine1() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_engine1() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_engine2() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_engine2() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_engine3() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('compiler_option',
    sa.Column('table_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('flag', sa.Text(), nullable=True),
    sa.Column('fk_compiler_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['fk_compiler_id'], ['compiler.table_id'], ),
    sa.PrimaryKeyConstraint('table_id')
    )
    op.create_index(op.f('ix_compiler_option_table_id'), 'compiler_option', ['table_id'], unique=False)
    op.create_table('qaas',
    sa.Column('table_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('timestamp', sa.String(length=50), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('fk_execution_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['fk_execution_id'], ['execution.table_id'], ),
    sa.PrimaryKeyConstraint('table_id')
    )
    op.create_index(op.f('ix_qaas_table_id'), 'qaas', ['table_id'], unique=False)
    op.create_table('qaas_run',
    sa.Column('table_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('fk_execution_id', sa.Integer(), nullable=True),
    sa.Column('fk_qaas_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['fk_execution_id'], ['execution.table_id'], ),
    sa.ForeignKeyConstraint(['fk_qaas_id'], ['qaas.table_id'], ),
    sa.PrimaryKeyConstraint('table_id')
    )
    op.create_index(op.f('ix_qaas_run_table_id'), 'qaas_run', ['table_id'], unique=False)
    op.add_column('asm', sa.Column('fk_loop_id', sa.Integer(), nullable=True))
    op.add_column('asm', sa.Column('fk_function_id', sa.Integer(), nullable=True))
    op.alter_column('asm', 'content',
               existing_type=sa.BLOB(),
               type_=sa.PickleType(),
               existing_nullable=True)
    op.create_foreign_key(None, 'asm', 'function', ['fk_function_id'], ['table_id'])
    op.create_foreign_key(None, 'asm', 'loop', ['fk_loop_id'], ['table_id'])
    op.add_column('block', sa.Column('fk_compiler_option_id', sa.Integer(), nullable=True))
    op.alter_column('block', 'line_number',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_constraint('block_ibfk_3', 'block', type_='foreignkey')
    op.create_foreign_key(None, 'block', 'compiler_option', ['fk_compiler_option_id'], ['table_id'])
    op.drop_column('block', 'fk_compiler_id')
    op.drop_column('compiler', 'avx_flags')
    op.drop_column('compiler', 'avx2_flags')
    op.drop_column('compiler', 'sse_flags')
    op.drop_column('compiler', 'novec_flags')
    op.drop_column('compiler', 'base_flags')
    op.alter_column('cqa_analysis', 'analysis',
               existing_type=mysql.TEXT(),
               type_=sa.PickleType(),
               existing_nullable=True)
    op.add_column('decan_run', sa.Column('maqao_decan_id', sa.Integer(), nullable=True))
    op.add_column('decan_run', sa.Column('type', sa.String(length=50), nullable=True))
    op.add_column('decan_run', sa.Column('frequency', sa.Float(), nullable=True))
    op.add_column('decan_run', sa.Column('fk_loop_id', sa.Integer(), nullable=True))
    op.alter_column('decan_run', 'bucket',
               existing_type=mysql.TEXT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.create_foreign_key(None, 'decan_run', 'loop', ['fk_loop_id'], ['table_id'])
    op.drop_column('decan_run', 'freq')
    op.add_column('execution', sa.Column('threads_per_core', sa.Integer(), nullable=True))
    op.alter_column('execution', 'log',
               existing_type=sa.BLOB(),
               type_=sa.PickleType(),
               existing_nullable=True)
    op.alter_column('execution', 'lprof_log',
               existing_type=sa.BLOB(),
               type_=sa.PickleType(),
               existing_nullable=True)
    op.alter_column('execution', 'cqa_context',
               existing_type=mysql.TEXT(),
               type_=sa.PickleType(),
               existing_nullable=True)
    op.alter_column('execution', 'config',
               existing_type=mysql.TEXT(),
               type_=sa.PickleType(),
               existing_nullable=True)
    op.alter_column('execution', 'global_metrics',
               existing_type=mysql.TEXT(),
               type_=sa.PickleType(),
               existing_nullable=True)
    op.add_column('function', sa.Column('fk_compiler_option_id', sa.Integer(), nullable=True))
    op.alter_column('function', 'function_name',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('function', 'label_name',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('function', 'cats',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('function', 'hierarchy',
               existing_type=mysql.TEXT(),
               type_=sa.PickleType(),
               existing_nullable=True)
    op.drop_constraint('function_ibfk_1', 'function', type_='foreignkey')
    op.drop_constraint('function_ibfk_3', 'function', type_='foreignkey')
    op.create_foreign_key(None, 'function', 'compiler_option', ['fk_compiler_option_id'], ['table_id'])
    op.drop_column('function', 'fk_compiler_id')
    op.drop_column('function', 'fk_asm_id')
    op.add_column('hwsystem', sa.Column('sockets', sa.Integer(), nullable=True))
    op.add_column('hwsystem', sa.Column('cores_per_socket', sa.Integer(), nullable=True))
    op.add_column('loop', sa.Column('fk_compiler_option_id', sa.Integer(), nullable=True))
    op.drop_constraint('loop_ibfk_3', 'loop', type_='foreignkey')
    op.drop_constraint('loop_ibfk_4', 'loop', type_='foreignkey')
    op.create_foreign_key(None, 'loop', 'compiler_option', ['fk_compiler_option_id'], ['table_id'])
    op.drop_column('loop', 'fk_compiler_id')
    op.drop_column('loop', 'fk_asm_id')
    op.alter_column('lprof_categorization_metric', 'metric_value',
               existing_type=mysql.FLOAT(),
               type_=sa.Text(),
               existing_nullable=True)
    op.add_column('maqao', sa.Column('nb_filtered_functions', sa.Integer(), nullable=True))
    op.add_column('maqao', sa.Column('cov_filtered_loops', sa.Integer(), nullable=True))
    op.add_column('maqao', sa.Column('nb_filtered_loops', sa.Integer(), nullable=True))
    op.add_column('maqao', sa.Column('config_count', sa.Integer(), nullable=True))
    op.add_column('maqao', sa.Column('cov_filtered_functions', sa.Integer(), nullable=True))
    op.add_column('module', sa.Column('fk_compiler_option_id', sa.Integer(), nullable=True))
    op.drop_constraint('module_ibfk_2', 'module', type_='foreignkey')
    op.create_foreign_key(None, 'module', 'compiler_option', ['fk_compiler_option_id'], ['table_id'])
    op.drop_column('module', 'fk_compiler_id')
    op.add_column('os', sa.Column('scaling_governor', sa.Text(), nullable=True))
    op.add_column('os', sa.Column('huge_pages', sa.Text(), nullable=True))
    op.add_column('os', sa.Column('driver_frequency', sa.Text(), nullable=True))
    op.alter_column('source', 'content',
               existing_type=sa.BLOB(),
               type_=sa.PickleType(),
               existing_nullable=True)
    op.alter_column('src_function', 'line_number',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('src_loop', 'line_number',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.Text(),
               existing_nullable=True)
    op.add_column('vprof_bucket_measure', sa.Column('range_value', sa.Text(), nullable=True))
    op.add_column('vprof_bucket_measure', sa.Column('bucket_instance_percent', sa.Text(), nullable=True))
    op.add_column('vprof_bucket_measure', sa.Column('bucket_cycle_percent', sa.Text(), nullable=True))
    op.add_column('vprof_bucket_measure', sa.Column('bucket_instances', sa.Text(), nullable=True))
    op.add_column('vprof_measure', sa.Column('instance_count', sa.Integer(), nullable=True))
    op.add_column('vprof_measure', sa.Column('invalid_count', sa.Integer(), nullable=True))
    op.add_column('vprof_measure', sa.Column('iteration_total', sa.Float(), nullable=True))
    op.add_column('vprof_measure', sa.Column('iteration_min', sa.Float(), nullable=True))
    op.add_column('vprof_measure', sa.Column('iteration_max', sa.Float(), nullable=True))
    op.add_column('vprof_measure', sa.Column('iteration_mean', sa.Float(), nullable=True))
    op.add_column('vprof_measure', sa.Column('cycle_total', sa.Float(), nullable=True))
    op.add_column('vprof_measure', sa.Column('cycle_min', sa.Float(), nullable=True))
    op.add_column('vprof_measure', sa.Column('cycle_max', sa.Float(), nullable=True))
    op.add_column('vprof_measure', sa.Column('cycle_mean', sa.Float(), nullable=True))
    op.add_column('vprof_measure', sa.Column('cycles_per_iteration_min', sa.Float(), nullable=True))
    op.add_column('vprof_measure', sa.Column('cycles_per_iteration_max', sa.Float(), nullable=True))
    op.add_column('vprof_measure', sa.Column('cycles_per_iteration_mean', sa.Float(), nullable=True))
    op.add_column('vprof_measure', sa.Column('fk_loop_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'vprof_measure', 'loop', ['fk_loop_id'], ['table_id'])
    # ### end Alembic commands ###


def downgrade_engine3() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'vprof_measure', type_='foreignkey')
    op.drop_column('vprof_measure', 'fk_loop_id')
    op.drop_column('vprof_measure', 'cycles_per_iteration_mean')
    op.drop_column('vprof_measure', 'cycles_per_iteration_max')
    op.drop_column('vprof_measure', 'cycles_per_iteration_min')
    op.drop_column('vprof_measure', 'cycle_mean')
    op.drop_column('vprof_measure', 'cycle_max')
    op.drop_column('vprof_measure', 'cycle_min')
    op.drop_column('vprof_measure', 'cycle_total')
    op.drop_column('vprof_measure', 'iteration_mean')
    op.drop_column('vprof_measure', 'iteration_max')
    op.drop_column('vprof_measure', 'iteration_min')
    op.drop_column('vprof_measure', 'iteration_total')
    op.drop_column('vprof_measure', 'invalid_count')
    op.drop_column('vprof_measure', 'instance_count')
    op.drop_column('vprof_bucket_measure', 'bucket_instances')
    op.drop_column('vprof_bucket_measure', 'bucket_cycle_percent')
    op.drop_column('vprof_bucket_measure', 'bucket_instance_percent')
    op.drop_column('vprof_bucket_measure', 'range_value')
    op.alter_column('src_loop', 'line_number',
               existing_type=sa.Text(),
               type_=mysql.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('src_function', 'line_number',
               existing_type=sa.Text(),
               type_=mysql.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('source', 'content',
               existing_type=sa.PickleType(),
               type_=sa.BLOB(),
               existing_nullable=True)
    op.drop_column('os', 'driver_frequency')
    op.drop_column('os', 'huge_pages')
    op.drop_column('os', 'scaling_governor')
    op.add_column('module', sa.Column('fk_compiler_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'module', type_='foreignkey')
    op.create_foreign_key('module_ibfk_2', 'module', 'compiler', ['fk_compiler_id'], ['table_id'])
    op.drop_column('module', 'fk_compiler_option_id')
    op.drop_column('maqao', 'cov_filtered_functions')
    op.drop_column('maqao', 'config_count')
    op.drop_column('maqao', 'nb_filtered_loops')
    op.drop_column('maqao', 'cov_filtered_loops')
    op.drop_column('maqao', 'nb_filtered_functions')
    op.alter_column('lprof_categorization_metric', 'metric_value',
               existing_type=sa.Text(),
               type_=mysql.FLOAT(),
               existing_nullable=True)
    op.add_column('loop', sa.Column('fk_asm_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('loop', sa.Column('fk_compiler_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'loop', type_='foreignkey')
    op.create_foreign_key('loop_ibfk_4', 'loop', 'compiler', ['fk_compiler_id'], ['table_id'])
    op.create_foreign_key('loop_ibfk_3', 'loop', 'asm', ['fk_asm_id'], ['table_id'])
    op.drop_column('loop', 'fk_compiler_option_id')
    op.drop_column('hwsystem', 'cores_per_socket')
    op.drop_column('hwsystem', 'sockets')
    op.add_column('function', sa.Column('fk_asm_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('function', sa.Column('fk_compiler_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'function', type_='foreignkey')
    op.create_foreign_key('function_ibfk_3', 'function', 'compiler', ['fk_compiler_id'], ['table_id'])
    op.create_foreign_key('function_ibfk_1', 'function', 'asm', ['fk_asm_id'], ['table_id'])
    op.alter_column('function', 'hierarchy',
               existing_type=sa.PickleType(),
               type_=mysql.TEXT(),
               existing_nullable=True)
    op.alter_column('function', 'cats',
               existing_type=sa.Text(),
               type_=mysql.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('function', 'label_name',
               existing_type=sa.Text(),
               type_=mysql.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('function', 'function_name',
               existing_type=sa.Text(),
               type_=mysql.VARCHAR(length=50),
               existing_nullable=True)
    op.drop_column('function', 'fk_compiler_option_id')
    op.alter_column('execution', 'global_metrics',
               existing_type=sa.PickleType(),
               type_=mysql.TEXT(),
               existing_nullable=True)
    op.alter_column('execution', 'config',
               existing_type=sa.PickleType(),
               type_=mysql.TEXT(),
               existing_nullable=True)
    op.alter_column('execution', 'cqa_context',
               existing_type=sa.PickleType(),
               type_=mysql.TEXT(),
               existing_nullable=True)
    op.alter_column('execution', 'lprof_log',
               existing_type=sa.PickleType(),
               type_=sa.BLOB(),
               existing_nullable=True)
    op.alter_column('execution', 'log',
               existing_type=sa.PickleType(),
               type_=sa.BLOB(),
               existing_nullable=True)
    op.drop_column('execution', 'threads_per_core')
    op.add_column('decan_run', sa.Column('freq', mysql.TEXT(), nullable=True))
    op.drop_constraint(None, 'decan_run', type_='foreignkey')
    op.alter_column('decan_run', 'bucket',
               existing_type=sa.Integer(),
               type_=mysql.TEXT(),
               existing_nullable=True)
    op.drop_column('decan_run', 'fk_loop_id')
    op.drop_column('decan_run', 'frequency')
    op.drop_column('decan_run', 'type')
    op.drop_column('decan_run', 'maqao_decan_id')
    op.alter_column('cqa_analysis', 'analysis',
               existing_type=sa.PickleType(),
               type_=mysql.TEXT(),
               existing_nullable=True)
    op.add_column('compiler', sa.Column('base_flags', mysql.TEXT(), nullable=True))
    op.add_column('compiler', sa.Column('novec_flags', mysql.TEXT(), nullable=True))
    op.add_column('compiler', sa.Column('sse_flags', mysql.TEXT(), nullable=True))
    op.add_column('compiler', sa.Column('avx2_flags', mysql.TEXT(), nullable=True))
    op.add_column('compiler', sa.Column('avx_flags', mysql.TEXT(), nullable=True))
    op.add_column('block', sa.Column('fk_compiler_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'block', type_='foreignkey')
    op.create_foreign_key('block_ibfk_3', 'block', 'compiler', ['fk_compiler_id'], ['table_id'])
    op.alter_column('block', 'line_number',
               existing_type=sa.Text(),
               type_=mysql.VARCHAR(length=50),
               existing_nullable=True)
    op.drop_column('block', 'fk_compiler_option_id')
    op.drop_constraint(None, 'asm', type_='foreignkey')
    op.drop_constraint(None, 'asm', type_='foreignkey')
    op.alter_column('asm', 'content',
               existing_type=sa.PickleType(),
               type_=sa.BLOB(),
               existing_nullable=True)
    op.drop_column('asm', 'fk_function_id')
    op.drop_column('asm', 'fk_loop_id')
    op.drop_index(op.f('ix_qaas_run_table_id'), table_name='qaas_run')
    op.drop_table('qaas_run')
    op.drop_index(op.f('ix_qaas_table_id'), table_name='qaas')
    op.drop_table('qaas')
    op.drop_index(op.f('ix_compiler_option_table_id'), table_name='compiler_option')
    op.drop_table('compiler_option')
    # ### end Alembic commands ###

